// Array

// Array is a Non-Primitive (Object DataType)
// Array are resizable
// Array copy Opration create Shallow Copy ()

const myArr = [10, "sahil", true, 1, 2, 3]
// console.log(myArr[1]); // "sahil"

// myArr.push(10) // insert at last position
// myArr.push("hi")

// myArr.pop() // delete last elem

myArr.shift() // delete first position
myArr.unshift("m") // insert at first position

// console.log(myArr.includes(2)); // true / false
// console.log(myArr.indexOf(true)); // index of value

const newArr = myArr.join()
// console.log(myArr);
// console.log(newArr);
// console.log(typeof newArr); // string


// slice üÜö splice
console.log('A ', myArr);

const myn1 = myArr.slice(1,3) // 1 - 2nd index copy
console.log(myn1);
console.log('B ', myArr);

const myn2 = myArr.splice(1,3) // 1 - 3rd index move data (deleted frem first)
console.log(myn2);
console.log('C ', myArr);


/* ‚≠ê‚≠ê‚≠ê Arrey Methods

at: ∆í at()
concat: ∆í concat()
constructor: ∆í Array()
copyWithin: ∆í copyWithin()
entries: ∆í entries()
every: ∆í every()
fill: ∆í fill()
filter: ∆í filter()
find: ∆í find()
findIndex: ∆í findIndex()
findLast: ∆í findLast()
findLastIndex: ∆í findLastIndex()
flat: ∆í flat()
flatMap: ∆í flatMap()
forEach: ∆í forEach()
includes: ∆í includes()
indexOf: ∆í indexOf()
join: ∆í join()
keys: ∆í keys()
lastIndexOf: ∆í lastIndexOf()
length: 0
map: ∆í map()
pop: ∆í pop()
push: ∆í push()
reduce: ∆í reduce()
reduceRight: ∆í reduceRight()
reverse: ∆í reverse()
shift: ∆í shift()
slice: ∆í slice()
some: ∆í some()
sort: ∆í sort()
splice: ∆í splice()
toLocaleString: ∆í toLocaleString()
toReversed: ∆í toReversed()
toSorted: ∆í toSorted()
toSpliced: ∆í toSpliced()
toString: ∆í toString()
unshift: ∆í unshift()
values: ∆í values()
with: ∆í with()
Symbol(Symbol.iterator): ∆í values()
Symbol(Symbol.unscopables): {a: rue, copyWithi: rue, entrie: rue, fil: rue, fin: rue, ‚Ä¶}
*/

